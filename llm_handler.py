"""
LLM Handler - X·ª≠ l√Ω giao ti·∫øp v·ªõi OpenAI API
"""
from openai import OpenAI
import json
from config import Config
from function_definitions import FUNCTIONS, SYSTEM_PROMPT
from context_memory import ContextMemory

class LLMHandler:
    def __init__(self):
        """Kh·ªüi t·∫°o OpenAI client"""
        Config.validate()  # Ki·ªÉm tra API key
        self.client = OpenAI(api_key=Config.OPENAI_API_KEY)
        self.model = Config.OPENAI_MODEL
        self.context_memory = ContextMemory()  # Th√™m context memory
        self.conversation_history = [
            {
                "role": "system",
                "content": SYSTEM_PROMPT
            }
        ]
        self.current_user_input = None  # L∆∞u input hi·ªán t·∫°i ƒë·ªÉ h·ªçc

    def add_user_message(self, message):
        """Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠"""
        self.conversation_history.append({
            "role": "user",
            "content": message
        })
        self._trim_history()

    def add_assistant_message(self, message):
        """Th√™m tin nh·∫Øn AI v√†o l·ªãch s·ª≠"""
        self.conversation_history.append({
            "role": "assistant",
            "content": message
        })
        self._trim_history()

    def add_function_result(self, function_name, result):
        """Th√™m k·∫øt qu·∫£ function v√†o l·ªãch s·ª≠"""
        self.conversation_history.append({
            "role": "function",
            "name": function_name,
            "content": result
        })
        self._trim_history()

    def _trim_history(self):
        """Gi·ªõi h·∫°n ƒë·ªô d√†i l·ªãch s·ª≠ h·ªôi tho·∫°i (gi·ªØ system prompt)"""
        if len(self.conversation_history) > Config.MAX_CONVERSATION_HISTORY:
            # Gi·ªØ system prompt (ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n)
            self.conversation_history = [self.conversation_history[0]] + \
                                       self.conversation_history[-(Config.MAX_CONVERSATION_HISTORY - 1):]

    def _inject_context_to_system_prompt(self):
        """Inject context memory v√†o system prompt"""
        context_summary = self.context_memory.get_context_summary()
        enhanced_prompt = SYSTEM_PROMPT + "\n\n" + context_summary

        # C·∫≠p nh·∫≠t system message
        self.conversation_history[0] = {
            "role": "system",
            "content": enhanced_prompt
        }

    def get_response(self, user_input):
        """
        G·ª≠i tin nh·∫Øn t·ªõi OpenAI v√† nh·∫≠n response

        Args:
            user_input: Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng

        Returns:
            dict: {
                "needs_function_call": bool,
                "function_name": str ho·∫∑c None,
                "function_args": dict ho·∫∑c None,
                "message": str ho·∫∑c None
            }
        """
        self.current_user_input = user_input  # L∆∞u l·∫°i ƒë·ªÉ h·ªçc
        self.add_user_message(user_input)

        # Inject context v√†o prompt
        self._inject_context_to_system_prompt()

        # Ph√°t hi·ªán t·ª´ kh√≥a ƒëi·ªÅu khi·ªÉn ƒë·ªÉ force function call
        user_lower = user_input.lower()

        # T·ª´ kh√≥a T√åM KI·∫æM/M·ªû nh·∫°c m·ªõi (∆∞u ti√™n cao nh·∫•t)
        play_music_keywords = ['m·ªü b√†i', 'ph√°t b√†i', 'b·∫≠t b√†i', 'nghe b√†i', 't√¨m b√†i', 'play b√†i']

        # T·ª´ kh√≥a ƒëi·ªÅu khi·ªÉn nh·∫°c ƒëang ph√°t (kh√¥ng ph·∫£i t√¨m b√†i m·ªõi)
        control_music_keywords = ['ti·∫øp t·ª•c', 'ph√°t ti·∫øp', 'ph√°t l·∫°i', 'play l·∫°i', 'pause', 't·∫°m d·ª´ng', 'd·ª´ng l·∫°i', 'stop', 't·∫Øt nh·∫°c', 'b·∫≠t l·∫°i']

        # T·ª´ kh√≥a ƒëi·ªÅu khi·ªÉn Otto (ch·ªâ khi KH√îNG li√™n quan nh·∫°c)
        otto_movement_keywords = ['sang tr√°i', 'sang ph·∫£i', 'ƒëi t·ªõi', 'ƒëi l√πi', 'ch·∫°y', 'quay', 'r·∫Ω', 'turn', 'walk', 'moonwalk']
        otto_emotion_keywords = ['vui v·∫ª', 'bu·ªìn b√£', 't·ª©c gi·∫≠n', 'wave', 'v·∫´y', 'bow', 'c√∫i', 'nh·∫£y']

        function_call_mode = "auto"

        # ∆Øu ti√™n 1: N·∫øu c√≥ t·ª´ "b√†i h√°t", "nh·∫°c", "m·ªü b√†i" ‚Üí play_youtube_music
        if any(keyword in user_lower for keyword in play_music_keywords) or 'b√†i h√°t' in user_lower or ('m·ªü' in user_lower and 'nh·∫°c' in user_lower):
            function_call_mode = "auto"  # ƒê·ªÉ AI t·ª± ch·ªçn play_youtube_music

        # ∆Øu ti√™n 2: Ki·ªÉm tra control_music (ƒëi·ªÅu khi·ªÉn nh·∫°c ƒëang ph√°t)
        elif any(keyword in user_lower for keyword in control_music_keywords):
            words = user_lower.split()
            if len(words) <= 3:  # L·ªánh ng·∫Øn ‚Üí control_music
                function_call_mode = {"name": "control_music"}

        # ∆Øu ti√™n 3: Ki·ªÉm tra control_otto (ch·ªâ khi r√µ r√†ng l√† l·ªánh Otto)
        elif any(keyword in user_lower for keyword in otto_movement_keywords):
            function_call_mode = {"name": "control_otto"}
        elif any(keyword in user_lower for keyword in otto_emotion_keywords):
            # Ch·ªâ force n·∫øu KH√îNG c√≥ t·ª´ li√™n quan nh·∫°c
            if 'nh·∫°c' not in user_lower and 'b√†i' not in user_lower and 'h√°t' not in user_lower:
                function_call_mode = {"name": "control_otto"}

        try:
            # N·∫øu c√≥ t·ª´ kh√≥a ƒëi·ªÅu khi·ªÉn ‚Üí b·∫Øt bu·ªôc g·ªçi function
            response = self.client.chat.completions.create(
                model=self.model,
                messages=self.conversation_history,
                functions=FUNCTIONS,
                function_call=function_call_mode
            )

            message = response.choices[0].message

            # Ki·ªÉm tra xem AI c√≥ mu·ªën g·ªçi function kh√¥ng
            if message.function_call:
                function_name = message.function_call.name

                # Parse arguments v·ªõi error handling
                try:
                    function_args = json.loads(message.function_call.arguments)
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è JSON parse error: {e}")
                    print(f"Raw arguments: {message.function_call.arguments}")
                    # Th·ª≠ fix c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
                    import re
                    fixed_args = message.function_call.arguments.replace('\n', '\\n').replace('\r', '\\r')
                    try:
                        function_args = json.loads(fixed_args)
                    except:
                        # Fallback - tr·∫£ v·ªÅ empty dict
                        function_args = {"reason": "Kh√¥ng th·ªÉ parse arguments"}

                return {
                    "needs_function_call": True,
                    "function_name": function_name,
                    "function_args": function_args,
                    "message": None
                }
            else:
                # AI tr·∫£ l·ªùi b√¨nh th∆∞·ªùng - Text response (KH√îNG N√äN X·∫¢Y RA v·ªõi l·ªánh ƒëi·ªÅu khi·ªÉn)
                ai_response = message.content

                # C·∫£nh b√°o n·∫øu c√≥ t·ª´ kh√≥a l·ªánh ƒëi·ªÅu khi·ªÉn m√† kh√¥ng g·ªçi function
                control_keywords = ['ti·∫øp t·ª•c', 'ph√°t', 'pause', 't·∫°m d·ª´ng', 'd·ª´ng', 'play', 'stop',
                                   'sang tr√°i', 'sang ph·∫£i', 'ƒëi', 'ch·∫°y', 'nh·∫£y', 'quay', 'r·∫Ω',
                                   'b·∫≠t nh·∫°c', 't·∫Øt nh·∫°c', 'b·∫≠t', 't·∫Øt']
                user_lower = self.current_user_input.lower() if self.current_user_input else ""

                if any(keyword in user_lower for keyword in control_keywords):
                    warning = f"\n‚ö†Ô∏è B·∫†N ƒê√É N√äU L·ªÜNH ƒêI·ªÄU KHI·ªÇN NH∆ØNG CH∆ØA G·ªåI FUNCTION! User: '{self.current_user_input}'"
                    ai_response = ai_response + warning

                # Post-processing: Lo·∫°i b·ªè c√¢u h·ªèi
                if '?' in ai_response or 'mu·ªën' in ai_response.lower() or 'c·∫ßn' in ai_response.lower() or 'ti·∫øp theo' in ai_response.lower():
                    ai_response = "OK! ü§ñ"

                self.add_assistant_message(ai_response)

                return {
                    "needs_function_call": False,
                    "function_name": None,
                    "function_args": None,
                    "message": ai_response
                }

        except Exception as e:
            return {
                "needs_function_call": False,
                "function_name": None,
                "function_args": None,
                "message": f"‚ùå L·ªói OpenAI API: {e}"
            }

    def get_final_response(self):
        """
        Sau khi th·ª±c thi function, g·ªçi l·∫°i OpenAI ƒë·ªÉ t·∫°o response cu·ªëi c√πng

        Returns:
            str: Response t·ª´ AI
        """
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=self.conversation_history
            )

            final_message = response.choices[0].message.content

            # Post-processing: Lo·∫°i b·ªè c√¢u h·ªèi n·∫øu c√≥
            if '?' in final_message or 'mu·ªën' in final_message.lower() or 'c·∫ßn' in final_message.lower() or 'ti·∫øp theo' in final_message.lower():
                # N·∫øu AI h·ªèi l·∫°i, r√∫t ng·∫Øn th√†nh OK
                final_message = "OK! ü§ñ"

            self.add_assistant_message(final_message)

            return final_message

        except Exception as e:
            return f"‚ùå L·ªói khi t·∫°o response: {e}"

    def record_action_to_memory(self, action, reason):
        """Ghi nh·∫≠n h√†nh ƒë·ªông v√†o memory ƒë·ªÉ h·ªçc"""
        if self.current_user_input:
            self.context_memory.record_action(action, reason, self.current_user_input)

            # H·ªçc s·ªü th√≠ch t·ª´ ho·∫°t ƒë·ªông
            activity = self.context_memory.extract_activity(self.current_user_input)
            if activity:
                self.context_memory.learn_preference(activity, action)

    def get_learned_stats(self):
        """L·∫•y th·ªëng k√™ nh·ªØng g√¨ ƒë√£ h·ªçc"""
        return self.context_memory.get_context_summary()

    def reset_conversation(self):
        """Reset l·ªãch s·ª≠ h·ªôi tho·∫°i (gi·ªØ l·∫°i system prompt)"""
        self.conversation_history = [
            {
                "role": "system",
                "content": SYSTEM_PROMPT
            }
        ]
        print("üîÑ ƒê√£ reset l·ªãch s·ª≠ h·ªôi tho·∫°i")
