import os
from openai import OpenAI
from pyfirmata import Arduino, util
import time
import json

# Kh·ªüi t·∫°o OpenAI client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# K·∫øt n·ªëi Arduino
board = Arduino('/dev/ttyACM0')
led_pin = 13

print("ü§ñ AI Chatbot ƒëi·ªÅu khi·ªÉn ƒë√®n Arduino ƒë√£ s·∫µn s√†ng!")
print("V√≠ d·ª•: 'b·∫≠t ƒë√®n', 't·∫Øt ƒë√®n', 't·ªëi qu√°', 's√°ng qu√°'\n")

# ƒê·ªãnh nghƒ©a functions cho OpenAI
functions = [
    {
        "name": "control_led",
        "description": "ƒêi·ªÅu khi·ªÉn ƒë√®n LED b·∫≠t ho·∫∑c t·∫Øt. G·ªçi h√†m n√†y khi ng∆∞·ªùi d√πng mu·ªën b·∫≠t/t·∫Øt ƒë√®n ho·∫∑c ph√†n n√†n v·ªÅ √°nh s√°ng (t·ªëi/s√°ng)",
        "parameters": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "enum": ["on", "off"],
                    "description": "H√†nh ƒë·ªông: 'on' ƒë·ªÉ b·∫≠t ƒë√®n, 'off' ƒë·ªÉ t·∫Øt ƒë√®n"
                }
            },
            "required": ["action"]
        }
    }
]

# H√†m ƒëi·ªÅu khi·ªÉn LED th·ª±c t·∫ø
def control_led(action):
    if action == "on":
        board.digital[led_pin].write(1)
        return "ƒê√£ b·∫≠t ƒë√®n ‚úÖ"
    elif action == "off":
        board.digital[led_pin].write(0)
        return "ƒê√£ t·∫Øt ƒë√®n ‚úÖ"
    else:
        return "L·ªánh kh√¥ng h·ª£p l·ªá"

# L·ªãch s·ª≠ h·ªôi tho·∫°i
conversation_history = [
    {
        "role": "system",
        "content": """B·∫°n l√† tr·ª£ l√Ω AI ƒëi·ªÅu khi·ªÉn ƒë√®n th√¥ng minh.
        - Khi ng∆∞·ªùi d√πng n√≥i 't·ªëi qu√°', 't·ªëi', 'b·∫≠t ƒë√®n', 'm·ªü ƒë√®n' -> g·ªçi control_led v·ªõi action='on'
        - Khi ng∆∞·ªùi d√πng n√≥i 's√°ng qu√°', 'ch√≥i qu√°', 't·∫Øt ƒë√®n', 't·∫Øt gi√∫p t√¥i' -> g·ªçi control_led v·ªõi action='off'
        - Tr·∫£ l·ªùi th√¢n thi·ªán b·∫±ng ti·∫øng Vi·ªát"""
    }
]

try:
    while True:
        # Nh·∫≠n input t·ª´ ng∆∞·ªùi d√πng
        user_input = input("B·∫°n: ")

        if user_input.lower() in ['tho√°t', 'exit', 'quit']:
            print("T·∫°m bi·ªát! üëã")
            break

        # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        conversation_history.append({
            "role": "user",
            "content": user_input
        })

        # G·ªçi OpenAI API
        response = client.chat.completions.create(
            model="gpt-4",
            messages=conversation_history,
            functions=functions,
            function_call="auto"
        )

        message = response.choices[0].message

        # Ki·ªÉm tra xem AI c√≥ mu·ªën g·ªçi function kh√¥ng
        if message.function_call:
            function_name = message.function_call.name
            function_args = json.loads(message.function_call.arguments)

            # Th·ª±c thi function
            if function_name == "control_led":
                result = control_led(function_args["action"])
                print(f"üîß {result}")

                # Th√™m k·∫øt qu·∫£ function v√†o l·ªãch s·ª≠
                conversation_history.append({
                    "role": "function",
                    "name": function_name,
                    "content": result
                })

                # G·ªçi l·∫°i API ƒë·ªÉ AI t·∫°o response cu·ªëi c√πng
                second_response = client.chat.completions.create(
                    model="gpt-4",
                    messages=conversation_history
                )

                final_message = second_response.choices[0].message.content
                print(f"AI: {final_message}")

                conversation_history.append({
                    "role": "assistant",
                    "content": final_message
                })
        else:
            # AI tr·∫£ l·ªùi b√¨nh th∆∞·ªùng kh√¥ng c·∫ßn g·ªçi function
            ai_response = message.content
            print(f"AI: {ai_response}")

            conversation_history.append({
                "role": "assistant",
                "content": ai_response
            })

except KeyboardInterrupt:
    print("\n\nƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh.")
finally:
    board.exit()
