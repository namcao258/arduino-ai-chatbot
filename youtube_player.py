"""
YouTube Player - T·ª± ƒë·ªông t√¨m v√† ph√°t nh·∫°c YouTube
"""
import subprocess
import platform
from youtubesearchpython import VideosSearch
import webbrowser
import os

class YouTubePlayer:
    def __init__(self):
        """Kh·ªüi t·∫°o YouTube Player"""
        self.system = platform.system()
        self.current_url = None

    def search_and_play(self, query, max_results=1):
        """
        T√¨m ki·∫øm v√† ph√°t nh·∫°c t·ª´ YouTube

        Args:
            query: T·ª´ kh√≥a t√¨m ki·∫øm (t√™n b√†i h√°t, ca sƒ©...)
            max_results: S·ªë k·∫øt qu·∫£ t√¨m ki·∫øm (m·∫∑c ƒë·ªãnh 1)

        Returns:
            str: K·∫øt qu·∫£ th·ª±c hi·ªán
        """
        try:
            # T√¨m ki·∫øm v√† l·∫•y URL video ƒë·∫ßu ti√™n b·∫±ng yt-dlp
            print(f"üîç ƒêang t√¨m ki·∫øm: {query}...")

            # D√πng yt-dlp ƒë·ªÉ t√¨m ki·∫øm
            result = subprocess.run(
                ['yt-dlp', '--get-id', '--get-title', f'ytsearch1:{query}'],
                capture_output=True,
                text=True,
                check=True
            )

            lines = result.stdout.strip().split('\n')
            if len(lines) >= 2:
                video_title = lines[0]
                video_id = lines[1]
                video_url = f"https://www.youtube.com/watch?v={video_id}"

                print(f"üéµ ƒê√£ t√¨m th·∫•y: {video_title}")

                # M·ªü video tr·ª±c ti·∫øp
                webbrowser.open(video_url)

                self.current_url = video_url
                return f"‚úÖ ƒêang ph√°t: {video_title}"
            else:
                return f"‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ cho: {query}"

        except subprocess.CalledProcessError:
            # Fallback: M·ªü trang t√¨m ki·∫øm n·∫øu yt-dlp l·ªói
            print("‚ö†Ô∏è  yt-dlp kh√¥ng kh·∫£ d·ª•ng, d√πng t√¨m ki·∫øm th√¥ng th∆∞·ªùng")
            import urllib.parse
            search_query = urllib.parse.quote(query)
            search_url = f"https://www.youtube.com/results?search_query={search_query}"
            webbrowser.open(search_url)
            return f"‚úÖ ƒê√£ m·ªü YouTube t√¨m ki·∫øm: {query} (b·∫°n click v√†o video ƒë·∫ßu ti√™n nh√©)"

        except Exception as e:
            return f"‚ùå L·ªói t√¨m ki·∫øm YouTube: {e}"

    def _play_url(self, url, title):
        """
        Ph√°t URL YouTube

        Args:
            url: YouTube URL
            title: Ti√™u ƒë·ªÅ video

        Returns:
            str: K·∫øt qu·∫£
        """
        try:
            if self.system == "Linux":
                # Th·ª≠ c√°c browser theo th·ª© t·ª± ∆∞u ti√™n
                browsers = [
                    'google-chrome',
                    'chromium-browser',
                    'firefox',
                    'microsoft-edge'
                ]

                for browser in browsers:
                    try:
                        # M·ªü browser ·ªü ch·∫ø ƒë·ªô n·ªÅn (kh√¥ng focus)
                        subprocess.Popen(
                            [browser, '--new-window', url],
                            stdout=subprocess.DEVNULL,
                            stderr=subprocess.DEVNULL
                        )
                        return f"‚úÖ ƒêang ph√°t: {title}"
                    except FileNotFoundError:
                        continue

                # Fallback: d√πng webbrowser
                webbrowser.open(url)
                return f"‚úÖ ƒêang ph√°t: {title}"

            else:
                # Windows & macOS
                webbrowser.open(url)
                return f"‚úÖ ƒêang ph√°t: {title}"

        except Exception as e:
            return f"‚ùå L·ªói ph√°t video: {e}"

    def play_specific_song(self, song_name, artist=None):
        """
        Ph√°t b√†i h√°t c·ª• th·ªÉ

        Args:
            song_name: T√™n b√†i h√°t
            artist: T√™n ca sƒ© (optional)

        Returns:
            str: K·∫øt qu·∫£
        """
        if artist:
            query = f"{song_name} {artist} official audio"
        else:
            query = f"{song_name} official audio"

        return self.search_and_play(query)

    def play_by_mood(self, mood):
        """
        Ph√°t nh·∫°c theo t√¢m tr·∫°ng

        Args:
            mood: T√¢m tr·∫°ng (bu·ªìn, vui, th∆∞ gi√£n, t·∫≠p th·ªÉ d·ª•c...)

        Returns:
            str: K·∫øt qu·∫£
        """
        mood_playlists = {
            "bu·ªìn": "sad emotional music playlist",
            "vui": "happy upbeat music playlist",
            "th∆∞ gi√£n": "relaxing chill music playlist",
            "t·∫≠p th·ªÉ d·ª•c": "workout gym music playlist",
            "l√†m vi·ªác": "focus study music playlist",
            "ng·ªß": "sleep meditation music",
            "l√£ng m·∫°n": "romantic love songs playlist",
            "party": "party dance music playlist"
        }

        query = mood_playlists.get(mood.lower(), f"{mood} music playlist")
        return self.search_and_play(query)

    def play_by_genre(self, genre):
        """
        Ph√°t nh·∫°c theo th·ªÉ lo·∫°i

        Args:
            genre: Th·ªÉ lo·∫°i (pop, rock, jazz, classical...)

        Returns:
            str: K·∫øt qu·∫£
        """
        query = f"{genre} music playlist 2024"
        return self.search_and_play(query)

    def get_current_playing(self):
        """L·∫•y th√¥ng tin b√†i h√°t ƒëang ph√°t"""
        if self.current_url:
            return f"üéµ ƒêang ph√°t: {self.current_url}"
        else:
            return "‚ùå Ch∆∞a c√≥ b√†i h√°t n√†o ƒëang ph√°t"


# Optional: YouTube downloader v√† ph√°t offline
class YouTubeDownloader:
    """
    Download YouTube audio v√† ph√°t b·∫±ng local player
    (Ch·∫•t l∆∞·ª£ng t·ªët h∆°n, kh√¥ng c·∫ßn browser)
    """

    def __init__(self, download_dir="./music_cache"):
        """
        Kh·ªüi t·∫°o YouTube Downloader

        Args:
            download_dir: Th∆∞ m·ª•c l∆∞u nh·∫°c
        """
        self.download_dir = download_dir
        os.makedirs(download_dir, exist_ok=True)

    def download_and_play(self, query):
        """
        Download audio v√† ph√°t b·∫±ng mpv/vlc

        Args:
            query: T·ª´ kh√≥a t√¨m ki·∫øm

        Returns:
            str: K·∫øt qu·∫£
        """
        try:
            # T√¨m ki·∫øm YouTube
            videos_search = VideosSearch(query, limit=1)
            results = videos_search.result()

            if not results['result']:
                return f"‚ùå Kh√¥ng t√¨m th·∫•y: {query}"

            video_url = results['result'][0]['link']
            video_title = results['result'][0]['title']

            print(f"‚¨áÔ∏è  ƒêang t·∫£i: {video_title}...")

            # Download audio b·∫±ng yt-dlp
            output_path = os.path.join(self.download_dir, '%(title)s.%(ext)s')
            subprocess.run([
                'yt-dlp',
                '-x',  # Extract audio
                '--audio-format', 'mp3',
                '--audio-quality', '0',  # Best quality
                '-o', output_path,
                video_url
            ], check=True)

            # Ph√°t b·∫±ng mpv ho·∫∑c vlc
            audio_file = os.path.join(self.download_dir, f"{video_title}.mp3")

            # Th·ª≠ mpv tr∆∞·ªõc (nh·∫π h∆°n)
            try:
                subprocess.Popen(['mpv', '--no-video', audio_file])
                return f"‚úÖ ƒêang ph√°t: {video_title}"
            except FileNotFoundError:
                # Fallback: vlc
                subprocess.Popen(['vlc', '--intf', 'dummy', audio_file])
                return f"‚úÖ ƒêang ph√°t: {video_title}"

        except subprocess.CalledProcessError:
            return "‚ùå L·ªói download. C√†i ƒë·∫∑t: pip install yt-dlp"
        except Exception as e:
            return f"‚ùå L·ªói: {e}"
