"""
Arduino Controller - Qu·∫£n l√Ω k·∫øt n·ªëi v√† ƒëi·ªÅu khi·ªÉn Arduino
"""
from pyfirmata import Arduino, util
from config import Config

class ArduinoController:
    def __init__(self, port=None, led_pin=None):
        """
        Kh·ªüi t·∫°o k·∫øt n·ªëi Arduino

        Args:
            port: C·ªïng serial (m·∫∑c ƒë·ªãnh t·ª´ Config)
            led_pin: Ch√¢n LED (m·∫∑c ƒë·ªãnh t·ª´ Config)
        """
        self.port = port or Config.ARDUINO_PORT
        self.led_pin = led_pin or Config.LED_PIN
        self.board = None
        self.is_connected = False

    def connect(self):
        """K·∫øt n·ªëi v·ªõi Arduino"""
        try:
            self.board = Arduino(self.port)
            self.is_connected = True
            print(f"‚úÖ ƒê√£ k·∫øt n·ªëi Arduino t·∫°i {self.port}")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi Arduino: {e}")
            print(f"   Ki·ªÉm tra: ls /dev/tty* ƒë·ªÉ xem c·ªïng kh·∫£ d·ª•ng")
            self.is_connected = False
            return False

    def turn_on_led(self):
        """B·∫≠t LED"""
        if not self.is_connected:
            return "‚ùå Arduino ch∆∞a k·∫øt n·ªëi"

        try:
            self.board.digital[self.led_pin].write(1)
            return f"‚úÖ ƒê√£ b·∫≠t LED t·∫°i pin {self.led_pin}"
        except Exception as e:
            return f"‚ùå L·ªói b·∫≠t LED: {e}"

    def turn_off_led(self):
        """T·∫Øt LED"""
        if not self.is_connected:
            return "‚ùå Arduino ch∆∞a k·∫øt n·ªëi"

        try:
            self.board.digital[self.led_pin].write(0)
            return f"‚úÖ ƒê√£ t·∫Øt LED t·∫°i pin {self.led_pin}"
        except Exception as e:
            return f"‚ùå L·ªói t·∫Øt LED: {e}"

    def control_led(self, action):
        """
        ƒêi·ªÅu khi·ªÉn LED theo action

        Args:
            action: "on" ho·∫∑c "off"

        Returns:
            str: K·∫øt qu·∫£ th·ª±c hi·ªán
        """
        if action == "on":
            return self.turn_on_led()
        elif action == "off":
            return self.turn_off_led()
        else:
            return f"‚ùå Action kh√¥ng h·ª£p l·ªá: {action}"

    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi Arduino"""
        if self.board:
            self.board.exit()
            self.is_connected = False
            print("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi Arduino")

    def __enter__(self):
        """Context manager - t·ª± ƒë·ªông k·∫øt n·ªëi"""
        self.connect()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager - t·ª± ƒë·ªông ng·∫Øt k·∫øt n·ªëi"""
        self.disconnect()
