"""
Main Entry Point - Ch∆∞∆°ng tr√¨nh ch√≠nh k·∫øt h·ª£p Otto Robot v√† AI Chatbot
"""
from otto_controller import OttoController
from otto_movements import OttoMovements
from music_controller import MusicController
from youtube_player import YouTubePlayer
from llm_handler import LLMHandler

def print_welcome():
    """In th√¥ng tin ch√†o m·ª´ng"""
    print("=" * 60)
    print("ü§ñ AI CHATBOT TH√îNG MINH - ƒêI·ªÄU KHI·ªÇN OTTO ROBOT & NH·∫†C")
    print("=" * 60)
    print("‚ú® AI c√≥ kh·∫£ nƒÉng SUY LU·∫¨N v√† H·ªåC t·ª´ b·∫°n!")
    print("\nV√≠ d·ª•:")
    print("  ‚Ä¢ 'Nh·∫£y ƒëi Otto' ‚Üí Otto nh·∫£y")
    print("  ‚Ä¢ 'Vui qu√°!' ‚Üí AI hi·ªÉu c·∫£m x√∫c ‚Üí Otto nh·∫£y vui")
    print("  ‚Ä¢ 'Ch√†o b·∫°n' ‚Üí Otto v·∫´y tay/c√∫i ch√†o")
    print("  ‚Ä¢ 'Ph√°t nh·∫°c EDM' ‚Üí T√¨m v√† ph√°t nh·∫°c EDM")
    print("\nL·ªánh ƒë·∫∑c bi·ªát:")
    print("  ‚Ä¢ 'stats' - Xem AI ƒë√£ h·ªçc ƒë∆∞·ª£c g√¨")
    print("  ‚Ä¢ 'reset' - X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i")
    print("  ‚Ä¢ 'clear' - X√≥a to√†n b·ªô memory ƒë√£ h·ªçc")
    print("  ‚Ä¢ 'exit' - Tho√°t")
    print("=" * 60)
    print()

def main():
    """H√†m ch√≠nh"""
    print_welcome()

    # Kh·ªüi t·∫°o Otto Controller
    try:
        otto_ctrl = OttoController()
        otto_moves = OttoMovements(otto_ctrl)
        print("ü§ñ Otto Robot ƒë√£ s·∫µn s√†ng!")
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Otto Robot: {e}")
        print("   1. Arduino + PCA9685 ƒë√£ k·∫øt n·ªëi ch∆∞a?")
        print("   2. I2C address ƒë√∫ng ch∆∞a? (0x40)")
        print("   3. C√°c servo ƒë√£ c·∫Øm ƒë√∫ng ch√¢n ch∆∞a?")
        return

    # Kh·ªüi t·∫°o Music Controller
    music = MusicController()
    print("üéµ Music Controller ƒë√£ kh·ªüi t·∫°o")

    # Kh·ªüi t·∫°o YouTube Player
    youtube = YouTubePlayer()
    print("üì∫ YouTube Player ƒë√£ kh·ªüi t·∫°o")

    # Kh·ªüi t·∫°o LLM Handler
    try:
        llm = LLMHandler()
    except ValueError as e:
        print(f"‚ùå {e}")
        return

    print("‚úÖ H·ªá th·ªëng s·∫µn s√†ng! H√£y chat v·ªõi AI...\n")

    # Main loop
    try:
        while True:
            # Nh·∫≠n input t·ª´ ng∆∞·ªùi d√πng
            user_input = input("B·∫°n: ").strip()

            if not user_input:
                continue

            # X·ª≠ l√Ω l·ªánh ƒë·∫∑c bi·ªát
            if user_input.lower() in ['exit', 'quit', 'tho√°t']:
                print("üëã T·∫°m bi·ªát!")
                otto_ctrl.cleanup()
                break

            if user_input.lower() == 'reset':
                llm.reset_conversation()
                continue

            if user_input.lower() == 'stats':
                print("\nüìä TH·ªêNG K√ä AI ƒê√É H·ªåC:")
                print(llm.get_learned_stats())
                continue

            if user_input.lower() == 'clear':
                confirm = input("‚ö†Ô∏è  X√≥a to√†n b·ªô memory ƒë√£ h·ªçc? (yes/no): ")
                if confirm.lower() in ['yes', 'y']:
                    llm.context_memory.clear_memory()
                else:
                    print("ƒê√£ h·ªßy!")
                continue

            # G·ª≠i tin nh·∫Øn t·ªõi AI
            response = llm.get_response(user_input)

            # Debug: In ra response ƒë·ªÉ ki·ªÉm tra
            print(f"üîç DEBUG - needs_function_call: {response['needs_function_call']}")
            if response['needs_function_call']:
                print(f"üîç DEBUG - function_name: {response['function_name']}")
                print(f"üîç DEBUG - function_args: {response['function_args']}")

            # Ki·ªÉm tra xem c√≥ c·∫ßn g·ªçi function kh√¥ng
            if response["needs_function_call"]:
                function_name = response["function_name"]
                function_args = response["function_args"]

                # Th·ª±c thi function t∆∞∆°ng ·ª©ng
                if function_name == "control_otto":
                    action = function_args.get("action")
                    emotion = function_args.get("emotion")
                    steps = function_args.get("steps")
                    reason = function_args.get("reason", "")

                    # Th·ª±c hi·ªán ƒë·ªông t√°c
                    try:
                        if emotion:
                            # Th·ª±c hi·ªán theo c·∫£m x√∫c
                            emotion_method = getattr(otto_moves, emotion, None)
                            if emotion_method:
                                result = emotion_method()
                            else:
                                result = f"‚ùå C·∫£m x√∫c '{emotion}' kh√¥ng h·ª£p l·ªá"
                        elif action:
                            # Th·ª±c hi·ªán ƒë·ªông t√°c c·ª• th·ªÉ
                            action_method = getattr(otto_moves, action, None)
                            if action_method:
                                # List c√°c ƒë·ªông t√°c c·∫ßn tham s·ªë steps
                                movements_with_steps = [
                                    'walk_forward', 'walk_backward', 'turn_left', 'turn_right',
                                    'run', 'jump', 'moonwalk_left', 'moonwalk_right',
                                    'swing', 'crusaito', 'flapping', 'tiptoe_swing',
                                    'jitter', 'shake_leg', 'updown'
                                ]

                                if action in movements_with_steps and steps:
                                    result = action_method(steps)
                                elif action in movements_with_steps:
                                    # D√πng default steps
                                    result = action_method()
                                else:
                                    result = action_method()
                            else:
                                result = f"‚ùå ƒê·ªông t√°c '{action}' kh√¥ng h·ª£p l·ªá"
                        else:
                            result = "‚ùå Kh√¥ng c√≥ action ho·∫∑c emotion ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"

                        print(f"ü§ñ {result}")
                        if reason:
                            print(f"üí≠ L√Ω do: {reason}")

                        # Ghi nh·∫≠n v√†o memory
                        llm.record_action_to_memory(action or emotion, reason)

                        # Th√™m k·∫øt qu·∫£ v√†o l·ªãch s·ª≠
                        llm.add_function_result(function_name, result)

                        # G·ªçi l·∫°i AI ƒë·ªÉ t·∫°o response cu·ªëi c√πng
                        final_response = llm.get_final_response()
                        print(f"AI: {final_response}")

                    except Exception as e:
                        print(f"‚ùå L·ªói khi th·ª±c hi·ªán ƒë·ªông t√°c: {e}")

                elif function_name == "control_music":
                    action = function_args.get("action")
                    reason = function_args.get("reason", "")
                    result = music.control_music(action)

                    # C·∫≠p nh·∫≠t music status v√†o context memory
                    if action == "play":
                        llm.context_memory.update_music_status("playing")
                    elif action == "pause":
                        llm.context_memory.update_music_status("paused")
                    elif action == "stop":
                        llm.context_memory.update_music_status("stopped")

                    print(f"üéµ {result}")
                    if reason:
                        print(f"üí≠ L√Ω do: {reason}")

                    # Ghi nh·∫≠n v√†o memory ƒë·ªÉ h·ªçc
                    llm.record_action_to_memory(action, reason)

                    # Th√™m k·∫øt qu·∫£ v√†o l·ªãch s·ª≠
                    llm.add_function_result(function_name, result)

                    # G·ªçi l·∫°i AI ƒë·ªÉ t·∫°o response cu·ªëi c√πng
                    final_response = llm.get_final_response()
                    print(f"AI: {final_response}")

                elif function_name == "play_youtube_music":
                    song_name = function_args.get("song_name")
                    artist = function_args.get("artist")
                    mood = function_args.get("mood")
                    genre = function_args.get("genre")
                    reason = function_args.get("reason", "")

                    # X√°c ƒë·ªãnh c√°ch ph√°t nh·∫°c
                    if song_name or artist:
                        # Ph√°t b√†i h√°t c·ª• th·ªÉ
                        result = youtube.play_specific_song(song_name or "", artist)
                        full_song_name = f"{song_name} - {artist}" if artist else song_name
                    elif mood:
                        # Ph√°t nh·∫°c theo t√¢m tr·∫°ng
                        result = youtube.play_by_mood(mood)
                        full_song_name = f"Nh·∫°c {mood}"
                    elif genre:
                        # Ph√°t nh·∫°c theo th·ªÉ lo·∫°i
                        result = youtube.play_by_genre(genre)
                        full_song_name = f"Nh·∫°c {genre}"
                    else:
                        # T√¨m ki·∫øm chung
                        query = reason if reason else "popular music 2024"
                        result = youtube.search_and_play(query)
                        full_song_name = query

                    # C·∫≠p nh·∫≠t v√†o context memory
                    llm.context_memory.update_music_status("playing", full_song_name)

                    print(f"üéµ {result}")
                    if reason:
                        print(f"üí≠ L√Ω do: {reason}")

                    # Ghi nh·∫≠n v√†o memory
                    llm.record_action_to_memory("play_youtube", reason)

                    # Th√™m k·∫øt qu·∫£ v√†o l·ªãch s·ª≠
                    llm.add_function_result(function_name, result)

                    # G·ªçi l·∫°i AI ƒë·ªÉ t·∫°o response cu·ªëi c√πng
                    final_response = llm.get_final_response()
                    print(f"AI: {final_response}")

                else:
                    print(f"‚ùå Function kh√¥ng x√°c ƒë·ªãnh: {function_name}")
            else:
                # AI tr·∫£ l·ªùi b√¨nh th∆∞·ªùng
                print(f"AI: {response['message']}")

            print()  # D√≤ng tr·ªëng ƒë·ªÉ d·ªÖ ƒë·ªçc

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  ƒê√£ nh·∫≠n Ctrl+C - ƒêang tho√°t...")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")
    finally:
        print("üîå ƒêang d·ªçn d·∫πp Otto Robot...")
        otto_ctrl.cleanup()

if __name__ == "__main__":
    main()
