"""
Main Entry Point - Ch∆∞∆°ng tr√¨nh ch√≠nh k·∫øt h·ª£p Arduino v√† AI Chatbot
"""
from arduino_controller import ArduinoController
from music_controller import MusicController
from youtube_player import YouTubePlayer
from llm_handler import LLMHandler

def print_welcome():
    """In th√¥ng tin ch√†o m·ª´ng"""
    print("=" * 60)
    print("ü§ñ AI CHATBOT TH√îNG MINH - ƒêI·ªÄU KHI·ªÇN ƒê√àN & NH·∫†C")
    print("=" * 60)
    print("‚ú® AI c√≥ kh·∫£ nƒÉng SUY LU·∫¨N v√† H·ªåC t·ª´ b·∫°n!")
    print("\nV√≠ d·ª•:")
    print("  ‚Ä¢ 'T√¥i s·∫Øp ƒë·ªçc s√°ch' ‚Üí AI hi·ªÉu c·∫ßn s√°ng ‚Üí B·∫≠t ƒë√®n")
    print("  ‚Ä¢ 'Bu·ªìn qu√°' ‚Üí AI hi·ªÉu c·∫ßn nh·∫°c ‚Üí B·∫≠t nh·∫°c")
    print("  ‚Ä¢ 'M·ªát qu√°, mu·ªën ng·ªß' ‚Üí AI hi·ªÉu c·∫ßn t·ªëi ‚Üí T·∫Øt ƒë√®n & nh·∫°c")
    print("  ‚Ä¢ 'Tr·ªùi m∆∞a ·∫£m ƒë·∫°m' ‚Üí AI hi·ªÉu c·∫ßn ·∫•m ‚Üí B·∫≠t ƒë√®n")
    print("\nL·ªánh ƒë·∫∑c bi·ªát:")
    print("  ‚Ä¢ 'stats' - Xem AI ƒë√£ h·ªçc ƒë∆∞·ª£c g√¨")
    print("  ‚Ä¢ 'reset' - X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i")
    print("  ‚Ä¢ 'clear' - X√≥a to√†n b·ªô memory ƒë√£ h·ªçc")
    print("  ‚Ä¢ 'exit' - Tho√°t")
    print("=" * 60)
    print()

def main():
    """H√†m ch√≠nh"""
    print_welcome()

    # Kh·ªüi t·∫°o Arduino Controller v·ªõi context manager
    with ArduinoController() as arduino:
        if not arduino.is_connected:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Arduino. Vui l√≤ng ki·ªÉm tra:")
            print("   1. Arduino ƒë√£ c·∫Øm USB ch∆∞a?")
            print("   2. ƒê√£ upload StandardFirmata ch∆∞a?")
            print("   3. C·ªïng serial ƒë√∫ng ch∆∞a? (ki·ªÉm tra: ls /dev/tty*)")
            return

        # Kh·ªüi t·∫°o Music Controller
        music = MusicController()
        print("üéµ Music Controller ƒë√£ kh·ªüi t·∫°o")

        # Kh·ªüi t·∫°o YouTube Player
        youtube = YouTubePlayer()
        print("üì∫ YouTube Player ƒë√£ kh·ªüi t·∫°o")

        # Kh·ªüi t·∫°o LLM Handler
        try:
            llm = LLMHandler()
        except ValueError as e:
            print(f"‚ùå {e}")
            return

        print("‚úÖ H·ªá th·ªëng s·∫µn s√†ng! H√£y chat v·ªõi AI...\n")

        # Main loop
        try:
            while True:
                # Nh·∫≠n input t·ª´ ng∆∞·ªùi d√πng
                user_input = input("B·∫°n: ").strip()

                if not user_input:
                    continue

                # X·ª≠ l√Ω l·ªánh ƒë·∫∑c bi·ªát
                if user_input.lower() in ['exit', 'quit', 'tho√°t']:
                    print("üëã T·∫°m bi·ªát!")
                    break

                if user_input.lower() == 'reset':
                    llm.reset_conversation()
                    continue

                if user_input.lower() == 'stats':
                    print("\nüìä TH·ªêNG K√ä AI ƒê√É H·ªåC:")
                    print(llm.get_learned_stats())
                    continue

                if user_input.lower() == 'clear':
                    confirm = input("‚ö†Ô∏è  X√≥a to√†n b·ªô memory ƒë√£ h·ªçc? (yes/no): ")
                    if confirm.lower() in ['yes', 'y']:
                        llm.context_memory.clear_memory()
                    else:
                        print("ƒê√£ h·ªßy!")
                    continue

                # G·ª≠i tin nh·∫Øn t·ªõi AI
                response = llm.get_response(user_input)

                # Ki·ªÉm tra xem c√≥ c·∫ßn g·ªçi function kh√¥ng
                if response["needs_function_call"]:
                    function_name = response["function_name"]
                    function_args = response["function_args"]

                    # Th·ª±c thi function t∆∞∆°ng ·ª©ng
                    if function_name == "control_led":
                        action = function_args.get("action")
                        reason = function_args.get("reason", "")
                        result = arduino.control_led(action)

                        print(f"üîß {result}")
                        if reason:
                            print(f"üí≠ L√Ω do: {reason}")

                        # Ghi nh·∫≠n v√†o memory ƒë·ªÉ h·ªçc
                        llm.record_action_to_memory(action, reason)

                        # Th√™m k·∫øt qu·∫£ v√†o l·ªãch s·ª≠
                        llm.add_function_result(function_name, result)

                        # G·ªçi l·∫°i AI ƒë·ªÉ t·∫°o response cu·ªëi c√πng
                        final_response = llm.get_final_response()
                        print(f"AI: {final_response}")

                    elif function_name == "control_music":
                        action = function_args.get("action")
                        reason = function_args.get("reason", "")
                        result = music.control_music(action)

                        print(f"üéµ {result}")
                        if reason:
                            print(f"üí≠ L√Ω do: {reason}")

                        # Ghi nh·∫≠n v√†o memory ƒë·ªÉ h·ªçc
                        llm.record_action_to_memory(action, reason)

                        # Th√™m k·∫øt qu·∫£ v√†o l·ªãch s·ª≠
                        llm.add_function_result(function_name, result)

                        # G·ªçi l·∫°i AI ƒë·ªÉ t·∫°o response cu·ªëi c√πng
                        final_response = llm.get_final_response()
                        print(f"AI: {final_response}")

                    elif function_name == "play_youtube_music":
                        song_name = function_args.get("song_name")
                        artist = function_args.get("artist")
                        mood = function_args.get("mood")
                        genre = function_args.get("genre")
                        reason = function_args.get("reason", "")

                        # X√°c ƒë·ªãnh c√°ch ph√°t nh·∫°c
                        if song_name or artist:
                            # Ph√°t b√†i h√°t c·ª• th·ªÉ
                            result = youtube.play_specific_song(song_name or "", artist)
                        elif mood:
                            # Ph√°t nh·∫°c theo t√¢m tr·∫°ng
                            result = youtube.play_by_mood(mood)
                        elif genre:
                            # Ph√°t nh·∫°c theo th·ªÉ lo·∫°i
                            result = youtube.play_by_genre(genre)
                        else:
                            # T√¨m ki·∫øm chung
                            query = reason if reason else "popular music 2024"
                            result = youtube.search_and_play(query)

                        print(f"üéµ {result}")
                        if reason:
                            print(f"üí≠ L√Ω do: {reason}")

                        # Ghi nh·∫≠n v√†o memory
                        llm.record_action_to_memory("play_youtube", reason)

                        # Th√™m k·∫øt qu·∫£ v√†o l·ªãch s·ª≠
                        llm.add_function_result(function_name, result)

                        # G·ªçi l·∫°i AI ƒë·ªÉ t·∫°o response cu·ªëi c√πng
                        final_response = llm.get_final_response()
                        print(f"AI: {final_response}")

                    else:
                        print(f"‚ùå Function kh√¥ng x√°c ƒë·ªãnh: {function_name}")
                else:
                    # AI tr·∫£ l·ªùi b√¨nh th∆∞·ªùng
                    print(f"AI: {response['message']}")

                print()  # D√≤ng tr·ªëng ƒë·ªÉ d·ªÖ ƒë·ªçc

        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  ƒê√£ nh·∫≠n Ctrl+C - ƒêang tho√°t...")
        except Exception as e:
            print(f"\n‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")
        finally:
            print("üîå ƒêang ng·∫Øt k·∫øt n·ªëi Arduino...")

if __name__ == "__main__":
    main()
