"""
Context Memory - Ghi nh·ªõ ng·ªØ c·∫£nh v√† s·ªü th√≠ch ng∆∞·ªùi d√πng
"""
from datetime import datetime
import json
import os

class ContextMemory:
    def __init__(self, storage_file="memory_data.json"):
        """
        Kh·ªüi t·∫°o Context Memory v·ªõi persistent storage

        Args:
            storage_file: File JSON ƒë·ªÉ l∆∞u d·ªØ li·ªáu h·ªçc ƒë∆∞·ª£c
        """
        self.storage_file = storage_file
        self.user_preferences = {}
        self.recent_actions = []

        # Tr·∫°ng th√°i m√¥i tr∆∞·ªùng v√† ng·ªØ c·∫£nh
        self.environment_state = {
            "music_status": "stopped",  # playing/paused/stopped
            "current_song": None,  # T√™n b√†i h√°t ƒëang ph√°t
            "otto_last_emotion": None,  # C·∫£m x√∫c g·∫ßn nh·∫•t c·ªßa Otto
            "otto_last_action": None,  # H√†nh ƒë·ªông g·∫ßn nh·∫•t
            "last_action_time": None,
        }

        # Ph√°t hi·ªán mood/c·∫£m x√∫c c·ªßa user
        self.user_mood_history = []  # L·ªãch s·ª≠ mood: [{timestamp, mood, reason}]
        self.current_user_mood = None  # vui/bu·ªìn/t·ª©c/b√¨nh th∆∞·ªùng/h√†o h·ª©ng

        # Conversation context
        self.conversation_topics = []  # C√°c ch·ªß ƒë·ªÅ ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn
        self.user_activities = {}  # Ho·∫°t ƒë·ªông user ƒëang l√†m: {activity: count}

        # Load d·ªØ li·ªáu ƒë√£ l∆∞u (n·∫øu c√≥)
        self.load_from_file()

    def record_action(self, action, reason, user_input):
        """Ghi nh·∫≠n h√†nh ƒë·ªông v√† l√Ω do"""
        record = {
            "timestamp": datetime.now().isoformat(),
            "user_input": user_input,
            "action": action,
            "reason": reason
        }
        self.recent_actions.append(record)

        # Gi·ªØ 20 actions g·∫ßn nh·∫•t (tƒÉng t·ª´ 10)
        if len(self.recent_actions) > 20:
            self.recent_actions.pop(0)

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i Otto
        if action in ['happy', 'sad', 'excited', 'confused', 'angry', 'scared', 'sleepy', 'love', 'surprised']:
            self.environment_state["otto_last_emotion"] = action
        else:
            self.environment_state["otto_last_action"] = action

        self.environment_state["last_action_time"] = datetime.now()

        # Ph√°t hi·ªán v√† ghi nh·∫≠n mood c·ªßa user
        self.detect_user_mood(user_input)

        # T·ª± ƒë·ªông l∆∞u sau m·ªói action
        self.save_to_file()

    def learn_preference(self, activity, preferred_light_state):
        """H·ªçc s·ªü th√≠ch: ho·∫°t ƒë·ªông n√†o th√≠ch ƒë√®n b·∫≠t/t·∫Øt"""
        if activity not in self.user_preferences:
            self.user_preferences[activity] = {"on": 0, "off": 0}

        self.user_preferences[activity][preferred_light_state] += 1

        # T·ª± ƒë·ªông l∆∞u sau khi h·ªçc
        self.save_to_file()

    def get_preference(self, activity):
        """L·∫•y s·ªü th√≠ch ƒë√£ h·ªçc v·ªÅ m·ªôt ho·∫°t ƒë·ªông"""
        if activity in self.user_preferences:
            prefs = self.user_preferences[activity]
            if prefs["on"] > prefs["off"]:
                return "on"
            elif prefs["off"] > prefs["on"]:
                return "off"
        return None

    def get_context_summary(self):
        """T·∫°o summary v·ªÅ context hi·ªán t·∫°i ƒë·ªÉ ƒë∆∞a v√†o prompt"""
        summary = "\nüß† NG·ªÆ C·∫¢NH HI·ªÜN T·∫†I:\n"

        # Tr·∫°ng th√°i nh·∫°c
        music_status = self.environment_state.get('music_status', 'stopped')
        current_song = self.environment_state.get('current_song')
        if music_status == 'playing' and current_song:
            summary += f"üéµ Nh·∫°c: ƒêang ph√°t '{current_song}'\n"
        elif music_status == 'paused' and current_song:
            summary += f"‚è∏Ô∏è Nh·∫°c: T·∫°m d·ª´ng '{current_song}'\n"
        else:
            summary += f"üéµ Nh·∫°c: ƒê√£ t·∫Øt\n"

        # Tr·∫°ng th√°i Otto
        otto_emotion = self.environment_state.get('otto_last_emotion')
        otto_action = self.environment_state.get('otto_last_action')
        if otto_emotion:
            summary += f"ü§ñ Otto: C·∫£m x√∫c '{otto_emotion}' g·∫ßn ƒë√¢y\n"
        elif otto_action:
            summary += f"ü§ñ Otto: V·ª´a th·ª±c hi·ªán '{otto_action}'\n"

        # Mood c·ªßa user
        if self.current_user_mood:
            summary += f"üòä Mood user: {self.current_user_mood}\n"

        # H√†nh ƒë·ªông g·∫ßn ƒë√¢y
        if self.recent_actions:
            summary += "\nüí≠ H√ÄNH ƒê·ªòNG G·∫¶N ƒê√ÇY:\n"
            for action in self.recent_actions[-5:]:  # 5 actions g·∫ßn nh·∫•t
                summary += f"  ‚Ä¢ {action['user_input'][:50]}... ‚Üí {action['action']}\n"

        # Ho·∫°t ƒë·ªông th∆∞·ªùng l√†m
        if self.user_activities:
            top_activities = sorted(self.user_activities.items(), key=lambda x: x[1], reverse=True)[:3]
            summary += "\nüìä HO·∫†T ƒê·ªòNG TH∆Ø·ªúNG L√ÄM:\n"
            for activity, count in top_activities:
                summary += f"  ‚Ä¢ {activity} ({count} l·∫ßn)\n"

        # Mood history
        if self.user_mood_history:
            summary += "\nüòå L·ªäCH S·ª¨ C·∫¢M X√öC:\n"
            for mood_record in self.user_mood_history[-3:]:
                summary += f"  ‚Ä¢ {mood_record['mood']}: \"{mood_record['text'][:40]}...\"\n"

        summary += "\n‚ö° S·ª¨ D·ª§NG NG·ªÆ C·∫¢NH TR√äN ƒê·ªÇ TR·∫¢ L·ªúI TH√îNG MINH H∆†N!\n"

        return summary

    def detect_user_mood(self, user_input):
        """Ph√°t hi·ªán mood/c·∫£m x√∫c c·ªßa user t·ª´ c√¢u n√≥i"""
        mood_keywords = {
            "vui": ["vui", "happy", "h·∫°nh ph√∫c", "vui v·∫ª", "vui qu√°", "tuy·ªát", "t·ªët qu√°", "nice", "cool"],
            "bu·ªìn": ["bu·ªìn", "sad", "kh√≥c", "ch√°n", "t·ªá", "t·ªìi t·ªá", "th·∫•t v·ªçng", "·ª©c ch·∫ø"],
            "t·ª©c gi·∫≠n": ["t·ª©c", "gi·∫≠n", "angry", "b·ª±c", "kh√≥ ch·ªãu", "m·ªát m·ªèi", "ch√°n n·∫£n"],
            "h√†o h·ª©ng": ["h√°o h·ª©c", "h√†o h·ª©ng", "excited", "ƒë·ªó", "th·∫Øng", "ƒë∆∞·ª£c", "th√†nh c√¥ng", "yayyy", "yeah"],
            "m·ªát m·ªèi": ["m·ªát", "tired", "ki·ªát s·ª©c", "ng·ªß", "u·ªÉ o·∫£i"],
            "lo l·∫Øng": ["lo", "s·ª£", "anxiety", "nervous", "cƒÉng th·∫≥ng", "stress"],
        }

        user_lower = user_input.lower()
        detected_mood = None

        for mood, keywords in mood_keywords.items():
            for keyword in keywords:
                if keyword in user_lower:
                    detected_mood = mood
                    break
            if detected_mood:
                break

        if detected_mood:
            self.current_user_mood = detected_mood
            self.user_mood_history.append({
                "timestamp": datetime.now().isoformat(),
                "mood": detected_mood,
                "text": user_input
            })

            # Gi·ªØ 10 mood g·∫ßn nh·∫•t
            if len(self.user_mood_history) > 10:
                self.user_mood_history.pop(0)

        return detected_mood

    def update_music_status(self, status, song_name=None):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i nh·∫°c"""
        self.environment_state["music_status"] = status  # playing/paused/stopped
        if song_name:
            self.environment_state["current_song"] = song_name
        self.save_to_file()

    def get_current_song(self):
        """L·∫•y b√†i h√°t ƒëang ph√°t"""
        return self.environment_state.get("current_song")

    def extract_activity(self, user_input):
        """Tr√≠ch xu·∫•t ho·∫°t ƒë·ªông t·ª´ input c·ªßa user"""
        activities = {
            "ƒë·ªçc": ["ƒë·ªçc", "read", "s√°ch", "b√°o", "t√†i li·ªáu"],
            "ng·ªß": ["ng·ªß", "sleep", "ngh·ªâ", "rest", "bu·ªìn ng·ªß"],
            "l√†m vi·ªác": ["l√†m vi·ªác", "work", "code", "h·ªçc", "coding", "deadline"],
            "xem phim": ["xem phim", "movie", "film", "netflix", "youtube"],
            "ƒÉn": ["ƒÉn", "eat", "c∆°m", "b·ªØa"],
            "t·∫≠p th·ªÉ d·ª•c": ["t·∫≠p", "gym", "ch·∫°y b·ªô", "workout"],
            "th∆∞ gi√£n": ["th∆∞ gi√£n", "chill", "relax", "ngh·ªâ ng∆°i"],
        }

        user_input_lower = user_input.lower()
        for activity, keywords in activities.items():
            for keyword in keywords:
                if keyword in user_input_lower:
                    # TƒÉng counter cho activity n√†y
                    if activity not in self.user_activities:
                        self.user_activities[activity] = 0
                    self.user_activities[activity] += 1
                    return activity
        return None

    def save_to_file(self):
        """L∆∞u d·ªØ li·ªáu v√†o file JSON"""
        try:
            # Chuy·ªÉn datetime th√†nh string ƒë·ªÉ serialize JSON
            environment_state_serializable = {
                "music_status": self.environment_state.get("music_status", "stopped"),
                "current_song": self.environment_state.get("current_song"),
                "otto_last_emotion": self.environment_state.get("otto_last_emotion"),
                "otto_last_action": self.environment_state.get("otto_last_action"),
                "last_action_time": self.environment_state["last_action_time"].isoformat() if self.environment_state.get("last_action_time") else None,
            }

            data = {
                "user_preferences": self.user_preferences,
                "recent_actions": self.recent_actions,
                "environment_state": environment_state_serializable,
                "current_user_mood": self.current_user_mood,
                "user_mood_history": self.user_mood_history,
                "user_activities": self.user_activities,
            }

            with open(self.storage_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói khi l∆∞u memory: {e}")
            return False

    def load_from_file(self):
        """Load d·ªØ li·ªáu t·ª´ file JSON"""
        if not os.path.exists(self.storage_file):
            print("üìù Ch∆∞a c√≥ d·ªØ li·ªáu h·ªçc tr∆∞·ªõc ƒë√≥. B·∫Øt ƒë·∫ßu m·ªõi!")
            return False

        try:
            with open(self.storage_file, 'r', encoding='utf-8') as f:
                data = json.load(f)

            self.user_preferences = data.get("user_preferences", {})
            self.recent_actions = data.get("recent_actions", [])
            self.current_user_mood = data.get("current_user_mood")
            self.user_mood_history = data.get("user_mood_history", [])
            self.user_activities = data.get("user_activities", {})

            # Parse datetime t·ª´ string
            env_state = data.get("environment_state", {})
            self.environment_state = {
                "music_status": env_state.get("music_status", "stopped"),
                "current_song": env_state.get("current_song"),
                "otto_last_emotion": env_state.get("otto_last_emotion"),
                "otto_last_action": env_state.get("otto_last_action"),
                "last_action_time": datetime.fromisoformat(env_state["last_action_time"]) if env_state.get("last_action_time") else None,
            }

            print(f"‚úÖ ƒê√£ load memory t·ª´ {self.storage_file}")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói khi load memory: {e}")
            return False

    def clear_memory(self):
        """X√≥a to√†n b·ªô memory v√† file"""
        self.user_preferences = {}
        self.recent_actions = []
        self.environment_state = {
            "led_status": "unknown",
            "last_action_time": None,
            "last_action": None
        }

        if os.path.exists(self.storage_file):
            os.remove(self.storage_file)
            print("üóëÔ∏è  ƒê√£ x√≥a to√†n b·ªô memory!")
        else:
            print("üóëÔ∏è  Memory ƒë√£ tr·ªëng!")
